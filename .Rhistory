library(haven) #to load datasets (.csv, .hav)
library(dplyr) #to recode variables
library(ggplot2) #density plots, etc.
library(tidyr)
#when you make changes, press knit, commit to main - changes will be reflected in github desktop & online
load("/Users/caseyzhang/Desktop/ICPSR_36850/DS0001/36850-0001-Data.rda")
Project_data <- da36850.0001 %>%
select(DEMGEN, GRIT01, GRIT02, GRIT03, GRIT04, GRIT05, GRIT06, GRIT07, GRIT08, TSCS01, TSCS02, TSCS03, TSCS04, TSCS05, TSCS06, TSCS07, TSCS08, TSCS09, DEMRA010)
#Missing values: listwise deletion
Project_data<- drop_na(Project_data)
#Gender: Change Numeric Values to Characters
Project_data %>% count(DEMGEN)
Project_data<- Project_data%>%
mutate(DEMGEN = str_replace_all(DEMGEN, c("\\(1\\) Female" = "1", "\\(0\\) Male" = "0")))
library(haven)
library(dplyr)
library(tidyr)
library(ggplot2)
library(psych)
library(bruceR)
library(ggsci)
library(see)
lab3data <- read.csv("/Users/caseyzhang/Documents/GitHub/Lab3/lab3data.csv")
#Listwise deletion
list_lab3data<- drop_na(lab3data)
#pair wise deletion will only be used when you run the actual analysis using "na.rm = TRUE"
View(lab3data)
library(haven)
library(dplyr)
library(tidyr)
library(ggplot2)
library(psych)
library(bruceR)
library(ggsci)
library(see)
lab3data <- read.csv("/Users/caseyzhang/Documents/GitHub/Lab3/lab3data.csv")
View(lab3data)
#Listwise deletion
list_lab3data<- drop_na(lab3data)
#pair wise deletion will only be used when you run the actual analysis using "na.rm = TRUE"
lab3data %>% count(Gender)
#Solution 1
lab3data<- lab3data%>%
mutate_at(c('Gender'),funs(str_replace(., "1", "Male")))
#Solution 2
#lab3data$Gender<-recode(lab3data$Gender, '1' = 'X', '2' = 'Y')
#Now recode 2 into Female
lab3data<- lab3data%>%
mutate_at(c('Gender'),funs(str_replace(., "2", "Female")))
#Gender: Change Numeric Values to Characters
Project_data %>% count(DEMGEN)
library(haven) #to load datasets (.csv, .hav)
library(dplyr) #to recode variables
library(ggplot2) #density plots, etc.
library(tidyr)
#when you make changes, press knit, commit to main - changes will be reflected in github desktop & online
load("/Users/caseyzhang/Desktop/ICPSR_36850/DS0001/36850-0001-Data.rda")
Project_data <- da36850.0001 %>%
select(DEMGEN, GRIT01, GRIT02, GRIT03, GRIT04, GRIT05, GRIT06, GRIT07, GRIT08, TSCS01, TSCS02, TSCS03, TSCS04, TSCS05, TSCS06, TSCS07, TSCS08, TSCS09, DEMRA010)
#Missing values: listwise deletion
Project_data<- drop_na(Project_data)
#Gender: Change Numeric Values to Characters
Project_data %>% count(DEMGEN)
Project_data<- Project_data%>%
mutate_at(c('DEMGEN'),funs(str_replace(., "\\(1\\) Female", "1")))
mutate(DEMGEN = str_replace_all(DEMGEN, c("\\(1\\) Female" = "1", "\\(0\\) Male" = "0")))
View(Project_data)
#Gender: Change Numeric Values to Characters
Project_data %>% count(DEMGEN)
Project_data<- Project_data%>%
mutate_at(c('DEMGEN'),funs(str_replace(., "\\(1\\) Female", "1")))
mutate_at(c('DEMGEN'),funs(str_replace(., "\\(0\\) Male", "0")))
#Gender: Change Numeric Values to Characters
Project_data %>% count(DEMGEN)
Project_data<- Project_data%>%
mutate_at(c('DEMGEN'),funs(str_replace(., "\\(1\\) Female", "1")))
mutate_at(c('DEMGEN'),funs(str_replace(., "\\(0\\) Male", "0")))
#Gender: Change Numeric Values to Characters
Project_data %>% count(DEMGEN)
Project_data<- Project_data%>%
mutate_at(c('DEMGEN'),funs(str_replace(., "\\(1\\) Female", "1")))
Project_data<- Project_data%>%
mutate_at(c('DEMGEN'),funs(str_replace(., "\\(0\\) Male", "0")))
mutate(DEMGEN = str_replace_all(DEMGEN, c("\\(1\\) Female" = "1", "\\(0\\) Male" = "0")))
#Gender: Change Numeric Values to Characters
Project_data %>% count(DEMGEN)
Project_data<- Project_data%>%
mutate_at(c('DEMGEN'),funs(str_replace(., "\\(1\\) Female", "1")))
Project_data<- Project_data%>%
mutate_at(c('DEMGEN'),funs(str_replace(., "\\(0\\) Male", "0")))
#Re-code reverse coded items: grit(1,5), self control(4,6,9)
Project_data$GRIT01_R <- 5 - Project_data$GRIT01
Project_data$GRIT05_R <- 5 - Project_data$GRIT05
Project_data$TSCS04_R <- 5 - Project_data$TSCS04
Project_data$TSCS06_R <- 5 - Project_data$TSCS06
Project_data$TSCS09_R <- 5 - Project_data$TSCS09
#Race: Change Numeric Values to Characters
Project_data %>% count(DEMRA010)
Project_data<- Project_data%>%
mutate(DEMRA010 = str_replace_all(DEMRA010, c("\\(1\\) Yes" = "1", "\\(0\\) No" = "0")))
Project_data <- Project_data %>%
mutate(GRIT = rowMeans(cbind(GRIT01_R, GRIT02, GRIT03, GRIT04, GRIT05_R, GRIT06, GRIT07, GRIT08)))
Project_data <- Project_data %>%
mutate(TSCS = rowMeans(cbind(TSCS01, TSCS02, TSCS03, TSCS04_R, TSCS05, TSCS06, TSCS07, TSCS08, TSCS09_R)))
Project_data_cor <- Project_data %>%
select(GRIT, TSCS)
Corr(Project_data_cor)
PROCESS(Project_data, y = "GRIT", x = "TSCS", mods = c("DEMGEN"))
ggplot(Project_data, aes(x = GRIT, y = TSCS)) + geom_point() + geom_smooth(method = lm) + theme_bruce()
ggplot(Project_data, aes(x = GRIT, y = TSCS)) + geom_point() + geom_smooth(method = lm) + theme_bruce() +facet_wrap(~DEMGEN)
PROCESS(Project_data, y = "GRIT", x = "TSCS", mods = c("DEMRA010"))
ggplot(Project_data, aes(x = GRIT, y = TSCS)) + geom_point() + geom_smooth(method = lm) + theme_bruce() +facet_wrap(~DEMRA010)
View(lab3data)
View(Project_data)
Alpha(Project_data, "TSCS", 1:9, rev = 4,6,9)
Alpha(Project_data, "TSCS", 1:9, rev = "4","6","9")
Alpha(Project_data, "TSCS", 1:9, rev = 4)
Alpha(Project_data, "TSCS", 1:9, rev = 4)
Alpha(Project_data, "TSCS", 1:9, rev = 4)
library(tidyverse)
library(bruceR)
library(haven)
lab9data<-read_sav("/Users/caseyzhang/Documents/GitHub/Lab9/lab9data.sav")
#Option 1:
#The traditional way is to recode your items first, then use the recoded items to test reliability
#(Note: Self protection is FSMI1-6. Recode FSMI3. "8" because it's on a scale from 1-7)
lab9data$FSMI3_R <- 8 - lab9data$FSMI3
#If you use the unrecoded items, it will mess up the Cronbach's alpha and lead you to draw wrong conclusion
#(Note: calculates cronbach's alpha, in paper report overall cronbach's a=0.873, which is good)
Alpha(lab9data, "FSMI", c("1", "2", "3_R", "4", "5", "6"))
#Option 2:
#If you don't want to recode your variable, you can use the shortcut below
#(Note: reverse code=3, 1:6 means items 1 through 6)
Alpha(lab9data, "FSMI", 1:6, rev = 3)
View(lab9data)
Alpha(Project_data, "TSCS", 01:09, rev = 04)
library(haven) #to load datasets (.csv, .hav)
library(dplyr) #to recode variables
library(ggplot2) #density plots, etc.
library(tidyr)
#when you make changes, press knit, commit to main - changes will be reflected in github desktop & online
load("/Users/caseyzhang/Desktop/ICPSR_36850/DS0001/36850-0001-Data.rda")
Project_data <- da36850.0001 %>%
select(DEMGEN, GRIT01, GRIT02, GRIT03, GRIT04, GRIT05, GRIT06, GRIT07, GRIT08, TSCS01, TSCS02, TSCS03, TSCS04, TSCS05, TSCS06, TSCS07, TSCS08, TSCS09, DEMRA010)
#Missing values: listwise deletion
Project_data<- drop_na(Project_data)
#Gender: Change Numeric Values to Characters
Project_data %>% count(DEMGEN)
Project_data<- Project_data%>%
mutate_at(c('DEMGEN'),funs(str_replace(., "\\(1\\) Female", "1")))
Project_data<- Project_data%>%
mutate_at(c('DEMGEN'),funs(str_replace(., "\\(0\\) Male", "0")))
#Re-code reverse coded items: grit(1,5), self control(4,6,9)
Project_data$GRIT01_R <- 5 - Project_data$GRIT01
Project_data$GRIT05_R <- 5 - Project_data$GRIT05
Project_data$TSCS04_R <- 5 - Project_data$TSCS04
Project_data$TSCS06_R <- 5 - Project_data$TSCS06
Project_data$TSCS09_R <- 5 - Project_data$TSCS09
#Race: Change Numeric Values to Characters
Project_data %>% count(DEMRA010)
Project_data<- Project_data%>%
mutate(DEMRA010 = str_replace_all(DEMRA010, c("\\(1\\) Yes" = "1", "\\(0\\) No" = "0")))
Project_data <- Project_data %>%
mutate(GRIT = rowMeans(cbind(GRIT01_R, GRIT02, GRIT03, GRIT04, GRIT05_R, GRIT06, GRIT07, GRIT08)))
Project_data <- Project_data %>%
mutate(TSCS = rowMeans(cbind(TSCS01, TSCS02, TSCS03, TSCS04_R, TSCS05, TSCS06, TSCS07, TSCS08, TSCS09_R)))
Project_data_cor <- Project_data %>%
select(GRIT, TSCS)
Corr(Project_data_cor)
PROCESS(Project_data, y = "GRIT", x = "TSCS", mods = c("DEMGEN"))
ggplot(Project_data, aes(x = GRIT, y = TSCS)) + geom_point() + geom_smooth(method = lm) + theme_bruce()
ggplot(Project_data, aes(x = GRIT, y = TSCS)) + geom_point() + geom_smooth(method = lm) + theme_bruce() +facet_wrap(~DEMGEN)
PROCESS(Project_data, y = "GRIT", x = "TSCS", mods = c("DEMRA010"))
ggplot(Project_data, aes(x = GRIT, y = TSCS)) + geom_point() + geom_smooth(method = lm) + theme_bruce() +facet_wrap(~DEMRA010)
Alpha(Project_data, "TSCS", 01:09, rev = 04)
Alpha(Project_data, "TSCS", 1:9, rev = 04)
Alpha(Project_data, "GRIT", c("GRIT01_R","GRIT02","GRIT03","GRIT04","GRIT05_R","GRIT06","GRIT07","GRIT08")
Alpha(Project_data, "GRIT", c("GRIT01_R","GRIT02","GRIT03","GRIT04","GRIT05_R","GRIT06","GRIT07","GRIT08"))
Alpha(Project_data, "GRIT", c("1_R","2","3","4","5_R","6","7","8"))
Alpha(Project_data, "TSCS", 1:9, rev = 4)
Alpha(Project_data, "TSCS", 1:9, rev = 4)
Alpha(Project_data, "TSCS", 01:09)
Alpha(Project_data, "TSCS", 1:9, rev = 4,6,9)
EFA(Project_data, "TSCS", 1:9, rev = 4,6,9, method = "pa", plot.scree = TRUE, nfactors = c("parallel"))
Alpha(Project_data, "TSCS", 1:9, rev = 4, 6, 9)
Alpha(Project_data, "TSCS", c("1", "2", "3", "4_R", "5", "6_R" , "7" , "8" , "9_R"))
colnames(Project_data)
Alpha(Project_data, "TSCS", c("1", "2", "3", "4_R", "5", "6_R" , "7" , "8" , "9_R"))
Alpha(Project_data, "TSCS", c("TSCS01", "TSCS02", "TSCS03", "TSCS04_R", "TSCS05", "TSCS06_R", "TSCS07", "TSCS08", "TSCS09_R"))
View(Project_data)
View(Project_data_cor)
library(dplyr)
Project_data %>% select(TSCS01, TSCS02, TSCS03, TSCS04_R, TSCS05, TSCS06_R, TSCS07, TSCS08, TSCS09_R)
Alpha(Project_data, "TSCS", c("TSCS01", "TSCS02", "TSCS03", "TSCS04_R", "TSCS05", "TSCS06_R", "TSCS07", "TSCS08", "TSCS09_R"))
library(dplyr)
Project_data %>% select(TSCS01, TSCS02, TSCS03, TSCS04_R, TSCS05, TSCS06_R, TSCS07, TSCS08, TSCS09_R)
Alpha(Project_data, "TSCS", c("TSCS01", "TSCS02", "TSCS03", "TSCS04_R", "TSCS05", "TSCS06_R", "TSCS07", "TSCS08", "TSCS09_R"))
library(dplyr)
Project_data %>% select(TSCS01, TSCS02, TSCS03, TSCS04_R, TSCS05, TSCS06_R, TSCS07, TSCS08, TSCS09_R)
# Subset data for TSCS columns
selected_columns <- Project_data %>% select(TSCS01, TSCS02, TSCS03, TSCS04_R, TSCS05, TSCS06_R, TSCS07, TSCS08, TSCS09_R)
# Calculate Cronbach's Alpha
alpha_result <- alpha(selected_columns)
# Print the result
print(alpha_result)
Alpha(Project_data, "TSCS", c("TSCS01", "TSCS02", "TSCS03", "TSCS04_R", "TSCS05", "TSCS06_R", "TSCS07", "TSCS08", "TSCS09_R"))
Alpha(Project_data, "TSCS", c("TSCS01", "TSCS02", "TSCS03", "TSCS04_R", "TSCS05", "TSCS06_R", "TSCS07", "TSCS08", "TSCS09_R"))
colnames(Project_data)
Alpha(Project_data, "TSCS", c("1", "2", "3", "4_R", "5", "6_R" , "7" , "8" , "9_R"))
colnames(Project_data)
Alpha(Project_data, "TSCS", c("1", "2", "3", "4_R", "5", "6_R" , "7" , "8" , "9_R"))
library(haven) #to load datasets (.csv, .hav)
library(dplyr) #to recode variables
library(ggplot2) #density plots, etc.
library(tidyr)
#when you make changes, press knit, commit to main - changes will be reflected in github desktop & online
load("/Users/caseyzhang/Desktop/ICPSR_36850/DS0001/36850-0001-Data.rda")
Project_data <- da36850.0001 %>%
select(DEMGEN, GRIT01, GRIT02, GRIT03, GRIT04, GRIT05, GRIT06, GRIT07, GRIT08, TSCS01, TSCS02, TSCS03, TSCS04, TSCS05, TSCS06, TSCS07, TSCS08, TSCS09, DEMRA010)
#Missing values: listwise deletion
Project_data<- drop_na(Project_data)
#Gender: Change Numeric Values to Characters
Project_data %>% count(DEMGEN)
Project_data<- Project_data%>%
mutate_at(c('DEMGEN'),funs(str_replace(., "\\(1\\) Female", "1")))
Project_data<- Project_data%>%
mutate_at(c('DEMGEN'),funs(str_replace(., "\\(0\\) Male", "0")))
#Re-code reverse coded items: grit(1,5), self control(4,6,9)
Project_data$GRIT01_R <- 5 - Project_data$GRIT01
Project_data$GRIT05_R <- 5 - Project_data$GRIT05
Project_data$TSCS04_R <- 5 - Project_data$TSCS04
Project_data$TSCS06_R <- 5 - Project_data$TSCS06
Project_data$TSCS09_R <- 5 - Project_data$TSCS09
#Race: Change Numeric Values to Characters
Project_data %>% count(DEMRA010)
Project_data<- Project_data%>%
mutate(DEMRA010 = str_replace_all(DEMRA010, c("\\(1\\) Yes" = "1", "\\(0\\) No" = "0")))
Project_data <- Project_data %>%
mutate(GRIT = rowMeans(cbind(GRIT01_R, GRIT02, GRIT03, GRIT04, GRIT05_R, GRIT06, GRIT07, GRIT08)))
Project_data <- Project_data %>%
mutate(TSCS = rowMeans(cbind(TSCS01, TSCS02, TSCS03, TSCS04_R, TSCS05, TSCS06, TSCS07, TSCS08, TSCS09_R)))
Project_data_cor <- Project_data %>%
select(GRIT, TSCS)
Corr(Project_data_cor)
PROCESS(Project_data, y = "GRIT", x = "TSCS", mods = c("DEMGEN"))
ggplot(Project_data, aes(x = GRIT, y = TSCS)) + geom_point() + geom_smooth(method = lm) + theme_bruce()
ggplot(Project_data, aes(x = GRIT, y = TSCS)) + geom_point() + geom_smooth(method = lm) + theme_bruce() +facet_wrap(~DEMGEN)
PROCESS(Project_data, y = "GRIT", x = "TSCS", mods = c("DEMRA010"))
ggplot(Project_data, aes(x = GRIT, y = TSCS)) + geom_point() + geom_smooth(method = lm) + theme_bruce() +facet_wrap(~DEMRA010)
colnames(Project_data)
Alpha(Project_data, "TSCS", c("1", "2", "3", "4_R", "5", "6_R" , "7" , "8" , "9_R"))
colnames(Project_data)
Alpha(Project_data, grepl("GRIT"), 1:8, rev = 4,6,9)
colnames(Project_data)
Alpha(Project_data, grepl("GRIT"), 1:8, rev = 4,6,9)
colnames(Project_data)
Alpha(Project_data, grepl("GRIT"), 1:8, rev = 4,6,9)
colnames(Project_data)
Alpha(Project_data, grepl("GRIT"), 1:8, rev = 4,6,9)
colnames(Project_data)
Alpha(Project_data, grepl("GRIT"), 1:8, rev = 1,3,5)
colnames(Project_data)
Alpha(Project_data, grepl("GRIT"), 1:8, rev = 1,3,5)
colnames(Project_data)
Alpha(Project_data, grepl("GRIT"), 1:8, rev = 1,3,5)
colnames(Project_data)
Alpha(Project_data, grepl("GRIT"), 1:8, rev = 1,3,5)
colnames(Project_data)
Alpha(Project_data, "TSCS", c("1", "2", "3", "4_R", "5", "6_R" , "7" , "8" , "9_R"))
colnames(Project_data)
Alpha(Project_data, "TSCS", c("TSCS01", "2", "3", "4_R", "5", "6_R" , "7" , "8" , "9_R"))
colnames(Project_data)
Alpha(Project_data, "TSCS", c("TSCS01"))
colnames(Project_data)
Alpha(Project_data, "TSCS", c("1"))
colnames(Project_data)
selected_columns <- Project_data[, c("TSCS01", "TSCS02", "TSCS03", "TSCS04_R", "TSCS05", "TSCS06_R", "TSCS07", "TSCS08", "TSCS09_R")]
Alpha(Project_data, "TSCS", c("1", "2", "3", "4_R", "5", "6_R" , "7" , "8" , "9_R"))
colnames(Project_data)
selected_columns <- Project_data[, c("TSCS01", "TSCS02", "TSCS03", "TSCS04_R", "TSCS05", "TSCS06_R", "TSCS07", "TSCS08", "TSCS09_R")]
library(psych)
# Calculate Cronbach's Alpha
alpha_result <- alpha(selected_columns)
# Print the result
print(alpha_result)
Alpha(Project_data, "TSCS", c("1", "2", "3", "4_R", "5", "6_R" , "7" , "8" , "9_R"))
Alpha(Project_data, constrains("GRIT"), 1:8, rev = 1,3,5)
colnames(Project_data)
selected_columns <- Project_data[, c("TSCS01", "TSCS02", "TSCS03", "TSCS04_R", "TSCS05", "TSCS06_R", "TSCS07", "TSCS08", "TSCS09_R")]
library(psych)
# Calculate Cronbach's Alpha
alpha_result <- alpha(selected_columns)
# Print the result
print(alpha_result)
Alpha(Project_data, "TSCS", c("1", "2", "3", "4_R", "5", "6_R" , "7" , "8" , "9_R"))
colnames(Project_data)
selected_columns <- Project_data[, c("TSCS01", "TSCS02", "TSCS03", "TSCS04_R", "TSCS05", "TSCS06_R", "TSCS07", "TSCS08", "TSCS09_R")]
library(psych)
alpha_result <- alpha(selected_columns)
print(alpha_result)
Alpha(Project_data, "TSCS", c("1", "2", "3", "4_R", "5", "6_R" , "7" , "8" , "9_R"))
colnames(Project_data)
selected_columns <- Project_data[, c("TSCS01", "TSCS02", "TSCS03", "TSCS04_R", "TSCS05", "TSCS06_R", "TSCS07", "TSCS08", "TSCS09_R")]
library(psych)
alpha_result <- alpha(selected_columns)
print(alpha_result)
Alpha(Project_data, "TSCS", c("1", "2", "3", "4_R", "5", "6_R" , "7" , "8" , "9_R"))
colnames(Project_data)
selected_columns <- Project_data[, c("TSCS01", "TSCS02", "TSCS03", "TSCS04_R", "TSCS05", "TSCS06_R", "TSCS07", "TSCS08", "TSCS09_R")]
library(psych)
alpha_result <- alpha(selected_columns)
print(alpha_result)
colnames(Project_data)
selected_columns <- Project_data[, c("GRIT_01", "GRIT02", "GRIT_03", "GRIT04", "GRIT_05", "GRIT06", "GRIT07", "GRIT08", "GRIT05")]
colnames(Project_data)
selected_columns <- Project_data[, c("TSCS01", "TSCS02", "TSCS03", "TSCS04_R", "TSCS05", "TSCS06_R", "TSCS07", "TSCS08", "TSCS09_R")]
library(psych)
alpha_result <- alpha(selected_columns)
print(alpha_result)
colnames(Project_data)
selected_columns <- Project_data[, c("GRIT01_R", "GRIT02", "GRIT03_R", "GRIT04", "GRIT_05", "GRIT06", "GRIT07", "GRIT08", "GRIT05")]
colnames(Project_data)
selected_columns <- Project_data[, c("TSCS01", "TSCS02", "TSCS03", "TSCS04_R", "TSCS05", "TSCS06_R", "TSCS07", "TSCS08", "TSCS09_R")]
library(psych)
alpha_result <- alpha(selected_columns)
print(alpha_result)
colnames(Project_data)
selected_columns <- Project_data[, c("GRIT01_R", "GRIT02", "GRIT03_R", "GRIT04", "GRIT05_R", "GRIT06", "GRIT07", "GRIT08", "GRIT05")]
colnames(Project_data)
selected_columns <- Project_data[, c("TSCS01", "TSCS02", "TSCS03", "TSCS04_R", "TSCS05", "TSCS06_R", "TSCS07", "TSCS08", "TSCS09_R")]
library(psych)
alpha_result <- alpha(selected_columns)
print(alpha_result)
colnames(Project_data)
selected_columns <- Project_data[, c("GRIT01_R", "GRIT02", "GRIT03_R", "GRIT04", "GRIT05_R", "GRIT06", "GRIT07", "GRIT08", "GRIT05")]
#Gender: Change Numeric Values to Characters
Project_data %>% count(DEMGEN)
Project_data<- Project_data%>%
mutate_at(c('DEMGEN'),funs(str_replace(., "\\(1\\) Female", "1")))
Project_data<- Project_data%>%
mutate_at(c('DEMGEN'),funs(str_replace(., "\\(0\\) Male", "0")))
#Re-code reverse coded items: grit(1,3,5), self control(4,6,9)
Project_data$GRIT01_R <- 5 - Project_data$GRIT01
Project_data$GRIT03_R <- 5 - Project_data$GRIT03
Project_data$GRIT05_R <- 5 - Project_data$GRIT05
Project_data$TSCS04_R <- 5 - Project_data$TSCS04
Project_data$TSCS06_R <- 5 - Project_data$TSCS06
Project_data$TSCS09_R <- 5 - Project_data$TSCS09
#Race: Change Numeric Values to Characters
Project_data %>% count(DEMRA010)
Project_data<- Project_data%>%
mutate(DEMRA010 = str_replace_all(DEMRA010, c("\\(1\\) Yes" = "1", "\\(0\\) No" = "0")))
Project_data <- Project_data %>%
mutate(GRIT = rowMeans(cbind(GRIT01_R, GRIT02, GRIT03_R, GRIT04, GRIT05_R, GRIT06, GRIT07, GRIT08)))
Project_data <- Project_data %>%
mutate(TSCS = rowMeans(cbind(TSCS01, TSCS02, TSCS03, TSCS04_R, TSCS05, TSCS06, TSCS07, TSCS08, TSCS09_R)))
Project_data_cor <- Project_data %>%
select(GRIT, TSCS)
Corr(Project_data_cor)
PROCESS(Project_data, y = "GRIT", x = "TSCS", mods = c("DEMGEN"))
ggplot(Project_data, aes(x = GRIT, y = TSCS)) + geom_point() + geom_smooth(method = lm) + theme_bruce()
ggplot(Project_data, aes(x = GRIT, y = TSCS)) + geom_point() + geom_smooth(method = lm) + theme_bruce() +facet_wrap(~DEMGEN)
PROCESS(Project_data, y = "GRIT", x = "TSCS", mods = c("DEMRA010"))
ggplot(Project_data, aes(x = GRIT, y = TSCS)) + geom_point() + geom_smooth(method = lm) + theme_bruce() +facet_wrap(~DEMRA010)
Alpha(Project_data, "TSCS", c("1", "2", "3", "4_R", "5", "6_R" , "7" , "8" , "9_R"))
colnames(Project_data)
selected_columns <- Project_data[, c("TSCS01", "TSCS02", "TSCS03", "TSCS04_R", "TSCS05", "TSCS06_R", "TSCS07", "TSCS08", "TSCS09_R")]
library(psych)
alpha_result <- alpha(selected_columns)
print(alpha_result)
colnames(Project_data)
selected_columns <- Project_data[, c("GRIT01_R", "GRIT02", "GRIT03_R", "GRIT04", "GRIT05_R", "GRIT06", "GRIT07", "GRIT08", "GRIT05")]
library(psych)
alpha_result <- alpha(selected_columns)
print(alpha_result)
Alpha(Project_data, "TSCS", c("1", "2", "3", "4_R", "5", "6_R" , "7" , "8" , "9_R"))
EFA(Project_data, "TSCS", 1:9, rev = 4,6,9, method = "pa", plot.scree = TRUE, nfactors = c("parallel"))
# For TSCS
EFA(Project_data, "TSCS", as.character(1:9), rev = c(4, 6, 9), method = "pa", plot.scree = TRUE, nfactors = "parallel")
# Example: Use actual column names
EFA(Project_data, "TSCS", c("TSCS1", "TSCS2", "TSCS3", "TSCS4", "TSCS5", "TSCS6", "TSCS7", "TSCS8", "TSCS9"),
rev = c(4, 6, 9), method = "pa", plot.scree = TRUE, nfactors = "parallel")
# View the first few rows of the dataset and confirm column indices
head(Project_data)
# Check column names and their positions
names(Project_data)
# Correct the indices if necessary
EFA(Project_data, "TSCS", 1:9, rev = c(4, 6, 9), method = "pa", plot.scree = TRUE, nfactors = "parallel")
# For TSCS
tscs_columns <- c("TSCS01", "TSCS02", "TSCS03", "TSCS04", "TSCS05", "TSCS06", "TSCS07", "TSCS08", "TSCS09")
EFA(Project_data, "TSCS", vars = tscs_columns, rev = c("TSCS04", "TSCS06", "TSCS09"),
method = "pa", plot.scree = TRUE, nfactors = "parallel")
# For GRIT
grit_columns <- c("GRIT01", "GRIT02", "GRIT03", "GRIT04", "GRIT05", "GRIT06", "GRIT07", "GRIT08")
EFA(Project_data, "GRIT", vars = grit_columns, rev = c("GRIT01", "GRIT03", "GRIT05"),
method = "pa", plot.scree = TRUE, nfactors = "parallel")
EFA(Project_data, "TSCS", 1:9, rev = 4,6,9, method = "pa", plot.scree = TRUE, nfactors = c("parallel"))
#Self-control
tscs_columns <- c("TSCS01", "TSCS02", "TSCS03", "TSCS04", "TSCS05", "TSCS06", "TSCS07", "TSCS08", "TSCS09")
EFA(Project_data, "TSCS", vars = tscs_columns, rev = c("TSCS04", "TSCS06", "TSCS09"),
method = "pa", plot.scree = TRUE, nfactors = "parallel")
#Grit
grit_columns <- c("GRIT01", "GRIT02", "GRIT03", "GRIT04", "GRIT05", "GRIT06", "GRIT07", "GRIT08")
EFA(Project_data, "GRIT", vars = grit_columns, rev = c("GRIT01", "GRIT03", "GRIT05"),
method = "pa", plot.scree = TRUE, nfactors = "parallel")
#Didn't work
EFA(Project_data, "TSCS", 1:9, rev = 4,6,9, method = "pa", plot.scree = TRUE, nfactors = c("parallel"))
library(haven) #to load datasets (.csv, .hav)
library(dplyr) #to recode variables
library(ggplot2) #density plots, etc.
library(tidyr)
#when you make changes, press knit, commit to main - changes will be reflected in github desktop & online
load("/Users/caseyzhang/Desktop/ICPSR_36850/DS0001/36850-0001-Data.rda")
Project_data <- da36850.0001 %>%
select(DEMGEN, GRIT01, GRIT02, GRIT03, GRIT04, GRIT05, GRIT06, GRIT07, GRIT08, TSCS01, TSCS02, TSCS03, TSCS04, TSCS05, TSCS06, TSCS07, TSCS08, TSCS09, DEMRA010)
#Missing values: listwise deletion
Project_data<- drop_na(Project_data)
#Gender: Change Numeric Values to Characters
Project_data %>% count(DEMGEN)
Project_data<- Project_data%>%
mutate_at(c('DEMGEN'),funs(str_replace(., "\\(1\\) Female", "1")))
ggplot(Project_data, aes(x = GRIT, y = TSCS)) + geom_point() + geom_smooth(method = lm) + theme_bruce()
ggplot(Project_data, aes(x = GRIT, y = TSCS)) + geom_point() + geom_smooth(method = lm) + theme_bruce()
#Gender: Change Numeric Values to Characters
Project_data %>% count(DEMGEN)
Project_data<- Project_data%>%
mutate_at(c('DEMGEN'),funs(str_replace(., "\\(1\\) Female", "1")))
